version: '3.8'

services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PORTAINER_VOL}:/data
    ports:
      - "8000:9000"
    command: --admin-password ${PORTAINER_PASSWORD}
    networks:
      app_network:
        ipv4_address: 192.168.17.3
  rabbitmq:
    container_name: rabbitmq_3
    restart: unless-stopped
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${RABBITMQ_VOL}/data/:/var/lib/rabbitmq/
      - ${RABBITMQ_VOL}/log/:/var/log/rabbitmq
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      app_network:
        ipv4_address: 192.168.17.4
  minio:
    container_name: minio
    restart: unless-stopped
    hostname: minio
    image: quay.io/minio/minio:latest
    command: server --console-address ":9001" /data
    expose:
      - "9000"
      - "9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USERNAME}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${MINIO_VOL}/data:/data
    networks:
      app_network:
        ipv4_address: 192.168.17.5
  minio-mc:
    container_name: minio-mc
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - /etc/localtime:/etc/localtime:ro
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set object_storage http://192.168.17.5:9000 ${MINIO_USERNAME} ${MINIO_PASSWORD};
      /usr/bin/mc mb object_storage/public;
      /usr/bin/mc policy set public object_storage/public;
      exit 0;
      "
    networks:
      app_network:
        ipv4_address: 192.168.17.6
  postgres:
    image: postgres:latest
    container_name: postgres-db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${POSTGRES_VOL}/data:/var/lib/postgresql/data
    networks:
      app_network:
        ipv4_address: 192.168.17.7

  endpoint:
    image: 'my-app-endpoint'
    hostname: 'my-app-endpoint'
    build:
      dockerfile: ./Dockerfile-endpoint
    container_name: my-app-endpoint
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
    ports:
      - '5050:80'
    depends_on:
      - postgres
      - minio
      - rabbitmq
    environment:
      - APP_ENV=${APP_ENV}
      - APP_BUILD=${APP_BUILD}
      - APP_AUTH_ISSUER=${APP_AUTH_ISSUER}
      - APP_AUTH_SECRET=${APP_AUTH_SECRET}
      - APP_AUTH_SALT=${APP_AUTH_SALT}
      - APP_DB_SERVER=${APP_DB_SERVER}
      - APP_DB_NAME=${APP_DB_NAME}
      - APP_DB_PORT=${APP_DB_PORT}
      - APP_DB_USER=${APP_DB_USER}
      - APP_DB_PASS=${APP_DB_PASS}
      - APP_STORAGE_SERVER=${APP_STORAGE_SERVER}
      - APP_STORAGE_PORT=${APP_STORAGE_PORT}
      - APP_STORAGE_USER=${APP_STORAGE_USER}
      - APP_STORAGE_PASS=${APP_STORAGE_PASS}
      - APP_STORAGE_BUCKET=${APP_STORAGE_BUCKET}
      - APP_QUEUE_SERVER=${APP_QUEUE_SERVER}
      - APP_QUEUE_PORT=${APP_QUEUE_PORT}
      - APP_QUEUE_USER=${APP_QUEUE_USER}
      - APP_QUEUE_PASS=${APP_QUEUE_PASS}
      - APP_QUEUE_PREFIX=${APP_QUEUE_PREFIX}
    networks:
      app_network:
        ipv4_address: 192.168.17.10   
  workers:
    image: 'my-app-workers'
    hostname: 'my-app-workers'
    build:
      dockerfile: ./Dockerfile-workers
    container_name: my-app-workers
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgres
      - minio
      - rabbitmq
    environment:
      - APP_ENV=${APP_ENV}
      - APP_BUILD=${APP_BUILD}
      - APP_AUTH_ISSUER=${APP_AUTH_ISSUER}
      - APP_AUTH_SECRET=${APP_AUTH_SECRET}
      - APP_AUTH_SALT=${APP_AUTH_SALT}
      - APP_DB_SERVER=${APP_DB_SERVER}
      - APP_DB_NAME=${APP_DB_NAME}
      - APP_DB_PORT=${APP_DB_PORT}
      - APP_DB_USER=${APP_DB_USER}
      - APP_DB_PASS=${APP_DB_PASS}
      - APP_STORAGE_SERVER=${APP_STORAGE_SERVER}
      - APP_STORAGE_PORT=${APP_STORAGE_PORT}
      - APP_STORAGE_USER=${APP_STORAGE_USER}
      - APP_STORAGE_PASS=${APP_STORAGE_PASS}
      - APP_STORAGE_BUCKET=${APP_STORAGE_BUCKET}
      - APP_QUEUE_SERVER=${APP_QUEUE_SERVER}
      - APP_QUEUE_PORT=${APP_QUEUE_PORT}
      - APP_QUEUE_USER=${APP_QUEUE_USER}
      - APP_QUEUE_PASS=${APP_QUEUE_PASS}
      - APP_QUEUE_PREFIX=${APP_QUEUE_PREFIX}
    networks:
      app_network:
        ipv4_address: 192.168.17.11

#  nginx:
#    container_name: nginx
#    image: nginx:latest
#    restart: unless-stopped
#    ports:
#      - 80:80
#      - 443:443
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - ${NGINX_VOL}/conf:/etc/nginx/conf.d:rw
#      - ${NGINX_VOL}/logs:/var/log/nginx:rw
#      - ${NGINX_VOL}/www:/var/www/nginx:rw
#      - ${CERTBOT_VOL}/www:/var/www/certbot:rw
#    networks:
#      app_network:
#        ipv4_address: 192.168.17.8
#  certbot:
#    container_name: certbot
#    image: certbot/certbot
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - ${CERTBOT_VOL}/www:/var/www/certbot:rw

networks:
  app_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.17.0/24